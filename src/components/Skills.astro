---
import "../styles/skills.scss";
import ProgressBar from "./ProgressBar.astro";
import TitleUnderlined from "./TitleUnderlined.astro";
---

<section id="skills">
  <TitleUnderlined>My Skills</TitleUnderlined>

  <div id="skills-container">
    <div id="skills-information">
      <h2 class="title">My Skills and Expertise</h2>
      <p class="description">
        I've worked with React and React Native for the past 3 years, and I love
        them. I have a proven track record of building high quality web and
        mobile apps.
      </p>
      <p class="description">
        I'm also very experience with NodeJS, and I've built multiple REST APIs
        with NestJS, using controller/service architecture, queues, dependency
        injection and microservices.
      </p>
      <p class="description">
        I also have experience with CI/CD. I've written multiple automation
        scripts using Gitlab Pipelines and Github Actions to build, test and
        lint code. I've also written multi-stage Dockerfiles and deployed them
        to Kubernetes clusters using Pulumi (Infrastructure as Code).
      </p>
    </div>

    <div id="skills-progress">
      <ProgressBar id="html-css" label="HTML & CSS" value={90} />
      <ProgressBar
        id="javascript-typescript"
        label="JavaScript/TypeScript"
        value={80}
      />
      <ProgressBar id="react" label="React" value={80} />
      <ProgressBar id="react-native" label="React Native (Expo)" value={60} />
      <ProgressBar
        id="node-js"
        label="Node (ExpressJS, Koa, Fastify, NestJS)"
        value={70}
      />
      <ProgressBar
        id="sql-postgres"
        label="SQL (PostgreSQL, MySQL)"
        value={60}
      />
      <ProgressBar
        id="ci-cd"
        label="CI/CD (Github Actions, Gitlab Pipelines, Docker, Kubernetes, Pulumi)"
        value={50}
      />
    </div>
  </div>
</section>

<script>
  import anime from "animejs";

  let hasScrolledToAbout = false;

  function isElementVisible(element: HTMLElement) {
    var rect = element.getBoundingClientRect();

    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <=
        (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  }

  window.addEventListener("load", () => {
    if (isElementVisible(document.getElementById("skills"))) {
      if (!hasScrolledToAbout) {
        animateSkillsSection();
      }

      hasScrolledToAbout = true;

      document.getElementById("skills").classList.add("scrolled");
    }
  });

  window.addEventListener("scroll", () => {
    if (isElementVisible(document.getElementById("skills"))) {
      if (!hasScrolledToAbout) {
        animateSkillsSection();
      }

      hasScrolledToAbout = true;

      document.getElementById("skills").classList.add("scrolled");
    }
  });

  const animateSkillsSection = () => {
    anime({
      targets: "#skills .title-underlined",
      opacity: [0, 1],
      translateY: [-50, 0],
      duration: 500,
      easing: "linear",
    });

    anime({
      targets: "#skills #skills-information",
      opacity: [0, 1],
      translateX: [-50, 0],
      duration: 400,
      delay: 1100,
      easing: "linear",
    });

    anime({
      targets: "#skills #skills-progress",
      opacity: [0, 1],
      translateX: [50, 0],
      duration: 400,
      delay: 1100,
      easing: "linear",
    });

    const progressBars = document.querySelectorAll(
      "#skills #skills-progress .progress-bar"
    );

    progressBars.forEach((progressBar: HTMLProgressElement, index) => {
      anime({
        targets: progressBar,
        value: [0, progressBar.value],
        duration: 400,
        delay: 1500 + index * 100,
        easing: "linear",
      });
    });
  };
</script>
