---
import "../styles/modal.scss";

interface Props {
  id: string;
  title?: string;
}

const { id, title } = Astro.props;
---

<astro-modal
  class="modal micromodal-slide"
  id={`modal-${id}`}
  aria-hidden="true"
  data-id={id}
>
  <div class="modal__overlay" tabindex="-1" data-micromodal-close>
    <div
      class="modal__container"
      role="dialog"
      aria-modal="true"
      aria-labelledby="modal-1-title"
    >
      <header class="modal__header">
        {
          title && (
            <h2 class="modal__title" id="modal-1-title">
              {title}
            </h2>
          )
        }
        <div class="modal__close__container">
          <button
            class="modal__close"
            aria-label="Close modal"
            data-micromodal-close></button>
        </div>
      </header>
      <main class="modal__content" id="modal-1-content">
        <slot />
      </main>
      <footer>
        <button aria-label="Close modal" data-micromodal-close
          >Close Modal</button
        >
      </footer>
    </div>
  </div>
</astro-modal>

<script>
  import MicroModal from "micromodal";

  MicroModal.init();

  class Modal extends HTMLElement {
    constructor() {
      super();

      const id = this.dataset.id;

      const htmlElement = document.getElementsByTagName("html")[0];
      const modalOverlay = document.querySelector(".modal__overlay");
      const modalClose = document.querySelector(".modal__close");

      // Restore scrolling when modal is closed
      modalOverlay.addEventListener("click", () => {
        htmlElement.style.overflow = "auto";
      });
      modalClose.addEventListener("click", () => {
        htmlElement.style.overflow = "auto";
      });
    }
  }

  customElements.define("astro-modal", Modal);
</script>
